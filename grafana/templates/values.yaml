global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""
  security:
    allowInsecureImages: false
  compatibility:
    openshift:
      adaptSecurityContext: auto
kubeVersion: ""
extraDeploy: []
nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local
commonLabels: {}
commonAnnotations: {}
image:
  registry: docker.io
  repository: bitnami/grafana
  tag: 11.5.1-debian-12-r1
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
admin:
  existingSecret: "secret-grafana"
  userKey: "admin-user"
  existingSecretPasswordKey: admin-password
smtp:
  enabled: false
  user: user
  password: password
  host: ""
  fromAddress: ""
  fromName: ""
  skipVerify: "false"
  existingSecret: ""
  existingSecretUserKey: user
  existingSecretPasswordKey: password
plugins: ""
ldap:
  enabled: false
  allowSignUp: false
  configuration: ""
  configMapName: ""
  secretName: ""
  uri: ""
  binddn: ""
  bindpw: ""
  basedn: ""
  searchAttribute: "uid"
  searchFilter: ""
  extraConfiguration: ""
  tls:
    enabled: false
    startTls: false
    skipVerify: false
    certificatesMountPath: /opt/bitnami/grafana/conf/ldap/
    certificatesSecret: ""
    CAFilename: ""
    certFilename: ""
    certKeyFilename: ""
imageRenderer:
  enabled: false
  serverURL: ""
  callbackURL: ""
config:
  useGrafanaIniFile: false
  grafanaIniConfigMap: ""
  grafanaIniSecret: ""
dashboardsProvider:
  enabled: false
  configMapName: ""
dashboardsConfigMaps: []
datasources:
  secretName: ""
  secretDefinition: {}
notifiers:
  configMapName: ""
alerting:
  configMapName: ""
grafana:
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
  automountServiceAccountToken: false
  hostAliases: []
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  priorityClassName: ""
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  containerPorts:
    grafana: 3000
  extraPorts: []
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "nano"
  resources: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    path: /api/health
    scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    path: /api/health
    scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  lifecycleHooks: {}
  sidecars: []
  initContainers: []
  enableServiceLinks: true
  extraVolumes: []
  extraVolumeMounts: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraEnvVars: []
  extraConfigmaps: []
  command: []
  args: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
persistence:
  enabled: true
  storageClass: "nfs-storage"
  annotations: {}
  existingClaim: ""
  accessMode: ReadWriteOnce
  accessModes: []
  size: 10Gi
serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: false
service:
  type: ClusterIP
  clusterIP: ""
  ports:
    grafana: 3000
  nodePorts:
    grafana: ""
  loadBalancerIP: ""
  loadBalancerClass: ""
  loadBalancerSourceRanges: []
  annotations: {}
  externalTrafficPolicy: Cluster
  extraPorts: []
  sessionAffinity: None
  sessionAffinityConfig: {}
networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  addExternalClientAccess: true
  extraIngress: []
  extraEgress: []
  ingressPodMatchLabels: {}
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
ingress:
  enabled: true
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: grafana.devopsr66.com
  path: /
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  tls: true
  extraHosts: []
  extraPaths: []
  extraTls:
    - hosts:
        - grafana.devopsr66.com
      secretName: devopsr66-tls
  secrets: []
  selfSigned: false
  ingressClassName: "nginx"
  extraRules: []

metrics:
  enabled: false
  service:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "3000"
      prometheus.io/path: "/metrics"
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: ""
    scrapeTimeout: ""
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    labels: {}
    jobLabel: ""
  prometheusRule:
    enabled: false
    namespace: ""
    additionalLabels: {}
    rules: []
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r36
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resourcesPreset: "nano"
  resources: {}
  containerSecurityContext:
    seLinuxOptions: {}
    runAsUser: 0
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
